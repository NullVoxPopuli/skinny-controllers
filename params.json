{"name":"Skinny controllers","tagline":"An implementation of role-based policies and operations to help controllers lose weight.","body":"# skinny_controllers\r\n[![Gem Version](https://badge.fury.io/rb/skinny_controllers.svg)](https://badge.fury.io/rb/skinny_controllers)\r\n[![Build Status](https://travis-ci.org/NullVoxPopuli/skinny_controllers.svg?branch=master)](https://travis-ci.org/NullVoxPopuli/skinny_controllers)\r\n[![Code Climate](https://codeclimate.com/github/NullVoxPopuli/skinny_controllers/badges/gpa.svg)](https://codeclimate.com/github/NullVoxPopuli/skinny_controllers)\r\n[![Test Coverage](https://codeclimate.com/github/NullVoxPopuli/skinny_controllers/badges/coverage.svg)](https://codeclimate.com/github/NullVoxPopuli/skinny_controllers/coverage)\r\n[![Dependency Status](https://gemnasium.com/NullVoxPopuli/skinny_controllers.svg)](https://gemnasium.com/NullVoxPopuli/skinny_controllers)\r\n\r\nAn implementation of role-based policies and operations to help controllers lose weight.\r\n\r\nThe goal of this project is to help API apps be more slim, and separate logic as much as possible.\r\n\r\nThis gem is inspired by [trailblazer](https://github.com/apotonick/trailblazer), following similar patterns, yet allowing the structure of the rails app to not be entirely overhauled.\r\n\r\nPlease note that this is a work in progress, and that the defaults are subject to change. If you have an idea or suggestion for improved defaults, please submit an issue or pull request. :-)\r\n\r\n# Installation\r\n\r\n```ruby\r\ngem 'skinny_controllers'\r\n```\r\nor\r\n\r\n`gem install skinny_controllers`\r\n\r\n# Usage\r\n\r\n## In a controller:\r\n\r\n```ruby\r\ninclude SkinnyControllers::Diet\r\n# ...\r\n# in your action\r\nrender json: model\r\n```\r\n\r\nand that's it!\r\n\r\nThe above does a multitude of assumptions to make sure that you can type the least amount code possible.\r\n\r\n1. Your controller name is based off your model name (configurable per controller)\r\n2. Any defined policies or operations follow the formats (though they don't have to exist):\r\n  - `class #{Model.name}Policy`\r\n  - `module #{Model.name}Operations`\r\n3. Your model responds to `find`, and `where`\r\n4. Your model responds to `is_accessible_to?`. This can be changed at `SkinnyControllers.accessible_to_method`\r\n5. If relying on the default / implicit operations for create and update, the params key for your model's changes much be formatted as `{ Model.name.underscore => { attributes }}``\r\n6. If using strong parameters, SkinnyControllers will look for `{action}_{model}_params` then `{model}_params` and then `params`. See the `strong_parameters_spec.rb` test to see an example.\r\n\r\n### Your model name might be different from your resource name\r\nLets say you have a JSON API resource that you'd like to render that has some additional/subset of data.\r\nMaybe the model is an `Event`, and the resource an `EventSummary` (which could do some aggregation of `Event` data).\r\n\r\nThe naming of all the objects should be as follows:\r\n - `EventSummariesController`\r\n - `EventSummaryOperations::*`\r\n - `EventSummaryPolicy`\r\n - and the model is still `Event`\r\n\r\nIn `EventSummariesController`, you would make the following additions:\r\n```ruby\r\nclass EventSummariesController < ApiController # or whatever your superclass is\r\n  include SkinnyControllers::Diet\r\n  self.model_class = Event\r\n\r\n  def index\r\n    render json: model, each_serializer: EventSummariesSerializer\r\n  end\r\n\r\n  def show\r\n    render json: model, serializer: EventSummariesSerializer\r\n  end\r\nend\r\n```\r\nNote that `each_serializer` and `serializer` is not part of `SkinnyControllers`, and is part of [ActiveModel::Serializers](https://github.com/rails-api/active_model_serializers).\r\n\r\n\r\n### What if you want to call your own operations?\r\n\r\nSometimes, magic is scary. You can call anything you want manually (operations and policies).\r\n\r\nHere is an example that manually makes the call to the Host Operations and passes the subdomain parameter in to filter the `Host` object on the subdomain.\r\n```ruby\r\ndef show\r\n  render json: host_from_subdomain, serializer: each_serializer\r\nend\r\n\r\nprivate\r\n\r\ndef host_from_subdomain\r\n  @host ||= HostOperations::Read.new(current_user, params, host_params).run\r\nend\r\n\r\ndef host_params\r\n  params.permit(:subdomain)\r\nend\r\n```\r\n\r\n### For JSON-API\r\n\r\nStrong parameters must be used on create/update actions.\r\n\r\nHere is an example params method\r\n\r\n```ruby\r\nprivate\r\n\r\ndef event_params\r\n  params\r\n    .require(:data)\r\n    .require(:attributes)\r\n    .permit(:name)\r\nend\r\n```\r\n\r\nNote that we don't need the id under the data hash, because in a RESTful api, the id will be available to us through the top level params hash.\r\n\r\n\r\n## Defining Operations\r\n\r\nOperations should be placed in `app/operations` of your rails app.\r\n\r\nFor operations concerning an `Event`, they should be under `app/operations/event_operations/`.\r\n\r\nUsing the example from the specs:\r\n```ruby\r\nmodule EventOperations\r\n  class Read < SkinnyControllers::Operation::Base\r\n    def run\r\n      model if allowed?\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nalternatively, all operation verbs can be stored in the same file under (for example) `app/operations/user_operations.rb`\r\n\r\n```ruby\r\nmodule UserOperations\r\n  class Read < SkinnyControllers::Operation::Base\r\n    def run\r\n      model if allowed?\r\n    end\r\n  end\r\n\r\n  class ReadAll < SkinnyControllers::Operation::Base\r\n    def run\r\n      model if allowed?\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### Creating\r\n\r\nTo achieve default functionality, this operation *may* be defined -- though, it is implicitly assumed to function this way if not defined.\r\n```ruby\r\nmodule UserOperations\r\n  class Create < SkinnyControllers::Operation::Base\r\n    def run\r\n      return unless allowed?\r\n      @model = model_class.new(model_params)\r\n      @model.save\r\n      @model # or just `model`\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### Updating\r\n```ruby\r\nmodule UserOperations\r\n  class Update < SkinnyControllers::Operation::Base\r\n    def run\r\n      return unless allowed?\r\n      model.update(model_params)\r\n      model\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### Deleting\r\n\r\nGoal: Users should only be able to delete themselves\r\n\r\nTo achieve default functionality, this operation *may* be defined -- though, it is implicitly assumed to function this way if not defined.\r\n```ruby\r\nmodule UserOperations\r\n  class Delete < SkinnyControllers::Operation::Base\r\n    def run\r\n      model.destroy if allowed?\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nAnd given that this method exists on the `User` model:\r\n```ruby\r\n# realistically, you'd only want users to be able to access themselves\r\ndef is_accessible_to?(user)\r\n  self.id == user.id\r\nend\r\n```\r\n\r\nMaking a call to the destroy action on the `UsersController` will only succeed if the user trying to delete themselves. (Possibly to 'cancel their account')\r\n\r\n\r\n## Defining Policies\r\n\r\nPolicies should be placed in `app/policies` of your rails app.\r\nThese are where you define your access logic, and how to decide if a user has access to the `object`\r\n\r\n```ruby\r\nclass EventPolicy < SkinnyControllers::Policy::Base\r\n  def read?(o = object)\r\n    o.is_accessible_to?(user)\r\n  end\r\nend\r\n```\r\n\r\n\r\n## Globally Configurable Options\r\n\r\nAll of these can be set on `SkinnyControllers`,\r\ne.g.:\r\n```ruby\r\nSkinnyControllers.controller_namespace = 'API'\r\n```\r\n\r\nThe following options are available:\r\n\r\n|Option|Default|Note|\r\n|------|-------|----|\r\n|`operations_namespace` | '' | Optional namespace to put all the operations in. |\r\n|`operations_suffix`|`'Operations'` | Default suffix for the operations namespaces. |\r\n|`policy_suffix`|`'Policy'`  | Default suffix for policies classes. |\r\n|`controller_namespace`|`''`| Global Namespace for all controllers (e.g.: `'API'`) |\r\n|`allow_by_default`| `true` | Default permission |\r\n|`accessible_to_method`|`is_accessible_to?`| method to call an the object that the user might be able to access |\r\n|`accessible_to_scope`| `accessible_to`| scope / class method on an object that the user might be able to access |\r\n|`action_map`| see [skinny_controllers.rb](./lib/skinny_controllers.rb#L61)| |\r\n\r\n## TODO\r\n\r\n - Configurable Error Renderer\r\n   - Default to JSON API format errors?\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}